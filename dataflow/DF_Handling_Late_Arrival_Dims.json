{
	"name": "DF_Handling_Late_Arrival_Dims",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_LAD_Invoice",
						"type": "DatasetReference"
					},
					"name": "SourceInvoiceFCT"
				},
				{
					"dataset": {
						"referenceName": "SnowflakeTable_LAD_Customer_DIM",
						"type": "DatasetReference"
					},
					"name": "SourceCustomerDim"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable_LAD_Customer_DIM",
						"type": "DatasetReference"
					},
					"name": "sinkSNF"
				}
			],
			"transformations": [
				{
					"name": "join"
				},
				{
					"name": "filter"
				},
				{
					"name": "derivedColumns"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     job_id as string (\"SP_001\")",
				"}",
				"source(output(",
				"          INVOICE_SK as integer,",
				"          INVOICE_ID as integer,",
				"          CUSTOMER_ID as integer,",
				"          INVOICE_DATE as date,",
				"          SHIP_TO as string,",
				"          SHIP_TO_CITY as string,",
				"          SHIP_TO_COUNTRY as string,",
				"          SALES_PERSON_ID as integer,",
				"          SALES_PERSON_NAME as string,",
				"          TOTAL_PRODUCT_CNT as integer,",
				"          TOTAL_COST as double,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceInvoiceFCT",
				"source(output(",
				"          CUSTOMER_SK as integer,",
				"          CUSTOMER_ID as integer,",
				"          CUSTOMER_NAME as string,",
				"          BILL_TO as string,",
				"          INFERRED_STATUS as integer,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> SourceCustomerDim",
				"SourceInvoiceFCT, SourceCustomerDim join(SourceInvoiceFCT@CUSTOMER_ID == SourceCustomerDim@CUSTOMER_ID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join filter(isNull(SourceCustomerDim@CUSTOMER_ID)",
				") ~> filter",
				"filter derive(CUSTOMER_ID = SourceInvoiceFCT@CUSTOMER_ID,",
				"          CUSTOMER_NAME = \"N/A\",",
				"          BILL_TO = \"N/A\",",
				"          INFERRED_STATUS = 1,",
				"          di_job_id = $job_id,",
				"          di_load_dt = currentDate()) ~> derivedColumns",
				"derivedColumns alterRow(upsertIf(INFERRED_STATUS == 1)) ~> AlterRow1",
				"AlterRow1 select(mapColumn(",
				"          CUSTOMER_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          BILL_TO,",
				"          INFERRED_STATUS,",
				"          di_job_id = derivedColumns@di_job_id,",
				"          di_load_dt = derivedColumns@di_load_dt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['CUSTOMER_ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          CUSTOMER_SK,",
				"          CUSTOMER_ID,",
				"          CUSTOMER_NAME,",
				"          BILL_TO,",
				"          INFERRED_STATUS,",
				"          DI_JOB_ID = di_job_id,",
				"          DI_LOAD_DT = di_load_dt",
				"     )) ~> sinkSNF"
			]
		}
	}
}