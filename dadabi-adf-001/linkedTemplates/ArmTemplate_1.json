{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dadabi-adf-001"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_NYPD_Arrests_CleanUp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_NYPD_Arrests_DS",
								"type": "DatasetReference"
							},
							"name": "readCSVfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DelimitedText_NYPDcsv_sink",
								"type": "DatasetReference"
							},
							"name": "SinkADLS",
							"rejectedDataLinkedService": {
								"referenceName": "AzureDataLakeStorage_LS2",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						},
						{
							"name": "PickedRequiredCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ARREST_KEY as integer,",
						"          DATE_OF_ARREST as date,",
						"          PD_CD as integer,",
						"          PD_DESC as string,",
						"          KY_CD as integer,",
						"          OFNS_DESC as string,",
						"          LAW_CODE as string,",
						"          LAW_CAT_CD as string,",
						"          ARREST_BORO as string,",
						"          ARREST_PRECINCT as integer,",
						"          JURISDICTION_CODE as integer,",
						"          AGE_GROUP as string,",
						"          PERP_SEX as string,",
						"          PERP_RACE as string,",
						"          X_COORD_CD as double,",
						"          Y_COORD_CD as double,",
						"          Latitude as decimal(20,13),",
						"          Longitude as decimal(20,13),",
						"          {Point - Georeferenced Column} as string,",
						"          {Georeferenced Column} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readCSVfile",
						"join1 derive(LAW_CAT_CD = iif(LAW_CAT_CD == 'v' || LAW_CAT_CD == 'F' || LAW_CAT_CD == 'M', LAW_CAT_CD, 'Unknown'),",
						"          X_COORD_CD = iif(isNull(X_COORD_CD) || X_COORD_CD == 0, avg_X_COORD_CD, X_COORD_CD),",
						"          Y_COORD_CD = iif(isNull(Y_COORD_CD) || Y_COORD_CD == 0, avg_Y_COORD_CD, Y_COORD_CD),",
						"          Latitude = iif(isNull(Latitude) || Latitude == 0, avg_Latitude, Latitude),",
						"          Longitude = iif(isNull(Longitude) || Longitude == 0, avg_Longitude, Longitude)) ~> derivedColumn1",
						"readCSVfile aggregate(avg_X_COORD_CD = avg(X_COORD_CD),",
						"          avg_Y_COORD_CD = avg(Y_COORD_CD),",
						"          avg_Latitude = avg(Latitude),",
						"          avg_Longitude = avg(Longitude)) ~> aggregate1",
						"aggregate1, readCSVfile join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"derivedColumn1 select(mapColumn(",
						"          ARREST_KEY,",
						"          DATE_OF_ARREST,",
						"          PD_CD,",
						"          PD_DESC,",
						"          KY_CD,",
						"          OFNS_DESC,",
						"          LAW_CODE,",
						"          LAW_CAT_CD,",
						"          ARREST_BORO,",
						"          ARREST_PRECINCT,",
						"          JURISDICTION_CODE,",
						"          AGE_GROUP,",
						"          PERP_SEX,",
						"          PERP_RACE,",
						"          X_COORD_CD_Trans = X_COORD_CD,",
						"          Y_COORD_CD_Trans = Y_COORD_CD,",
						"          Latitude_Trans = Latitude,",
						"          Longitude_Trans = Longitude,",
						"          {Point - Georeferenced Column},",
						"          {Georeferenced Column}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> PickedRequiredCols",
						"PickedRequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_fileSystem: 'silver') ~> SinkADLS"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SEA_PET_LIC_BREED_DIM_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Snowflake_SEA_PET_LIC_v2_STG",
								"type": "DatasetReference"
							},
							"name": "SeaPetLicV2StgTbl"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_BreedDim_table",
								"type": "DatasetReference"
							},
							"name": "BreedDimMaxID"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_BreedDim_table",
								"type": "DatasetReference"
							},
							"name": "BreedDimTbl"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Snowflake_BreedDim_table",
								"type": "DatasetReference"
							},
							"name": "SinkSnfBreedDimTbl"
						}
					],
					"transformations": [
						{
							"name": "SourceDatawithSK"
						},
						{
							"name": "aggregateBreedKeys"
						},
						{
							"name": "JoinToTarget",
							"description": "Left Outer Join on 'aggregateBreedKeys' and 'BreedDimTbl'"
						},
						{
							"name": "FilterExistingRows"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedCols"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     job_id as string (\"sp_001\")",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as decimal(38,0),",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SeaPetLicV2StgTbl",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     query: 'select NVL(MAX(BREED_SK),0) as MaxBreedSK from SEATTLE_PET_LIC.BREED_DIM',",
						"     format: 'query') ~> BreedDimMaxID",
						"source(output(",
						"          BREED_SK as decimal(10,0),",
						"          START_DT as date,",
						"          END_DT as date,",
						"          IS_ACTIVE as decimal(10,0),",
						"          BREED_DK as decimal(10,0),",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> BreedDimTbl",
						"SeaPetLicV2StgTbl, BreedDimMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourceDatawithSK",
						"SourceDatawithSK aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
						"aggregateBreedKeys, BreedDimTbl join(SPECIES == SPECIES_NAME",
						"     && PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinToTarget",
						"JoinToTarget filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> FilterExistingRows",
						"derivedColumn1 keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(BREED_SK = MAXBREEDSK + RowNum,",
						"          BREED_DK = iif(Row_Action == 'insert', abs(toInteger(crc32(concat(SPECIES, PRIMARY_BREED, SECONDARY_BREED)))), toInteger(BREED_DK)),",
						"          DI_JOB_ID = $job_id,",
						"          DI_LOAD_DT = currentDate(),",
						"          START_DT = currentDate(),",
						"          END_DT = iif(Row_Action == 'update', currentDate(), toDate('9999-12-31')),",
						"          IS_ACTIVE = iif(Row_Action == 'update', '0', '1')) ~> derivedCols",
						"FilterExistingRows derive(Row_Action = iif(!isNull(BREED_DK) && IS_ACTIVE == 1 && (\r",
						"    SPECIES != SPECIES_NAME ||\r",
						"    PRIMARY_BREED != PRIMARY_BREED_NAME ||\r",
						"    SECONDARY_BREED != SECONDARY_BREED_NAME\r",
						"), 'update', 'insert')) ~> derivedColumn1",
						"derivedCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          START_DT,",
						"          END_DT,",
						"          IS_ACTIVE,",
						"          BREED_DK,",
						"          SPECIES_NAME = SPECIES,",
						"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
						"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> SinkSnfBreedDimTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SEA_PET_LIC_CleanUp_and_STG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SEA_PET_LIC_RAW_DS",
								"type": "DatasetReference"
							},
							"name": "readTSVfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "sinkAdlsSilver"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTbl_SEA_PET_LIC_v2_STG",
								"type": "DatasetReference"
							},
							"name": "SinkSnfStgTbl"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "PickedRequiredCols"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_ID as string (\"SP_001\")",
						"}",
						"source(output(",
						"          {License Issue Date} as string,",
						"          {License Number} as string,",
						"          {Animal's Name} as string,",
						"          Species as string,",
						"          {Primary Breed} as string,",
						"          {Secondary Breed} as string,",
						"          {ZIP Code} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readTSVfile",
						"readTSVfile derive(License_Issue_Date_trans = toDate({License Issue Date}, 'MMMM dd yyyy', 'en-US'),",
						"          Secondary_Breed_trans = iifNull({Secondary Breed}, 'Unknown'),",
						"          Zip_Code_trans = lpad(toString({ZIP Code}), 5, '0'),",
						"          Species_trans = upper(Species),",
						"          License_number_trans = toInteger(translate({License Number},'S', '')),",
						"          Animal_Name_trans = translate({Animal's Name}, '()', ''),",
						"          DI_Job_ID = $Job_ID,",
						"          DI_LOAD_DT = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          License_Issue_Date = License_Issue_Date_trans,",
						"          License_Number = License_number_trans,",
						"          Animal_Name = Animal_Name_trans,",
						"          Species = Species_trans,",
						"          Primary_Breed = {Primary Breed},",
						"          Secondary_Breed = Secondary_Breed_trans,",
						"          Zip_Code = Zip_Code_trans,",
						"          DI_Job_ID,",
						"          DI_LOAD_DT",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> PickedRequiredCols",
						"PickedRequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: []) ~> sinkAdlsSilver",
						"PickedRequiredCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LICENSE_ISSUE_DATE = License_Issue_Date,",
						"          LICENSE_NUMBER = License_Number,",
						"          ANIMAL_NAME = Animal_Name,",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = Zip_Code,",
						"          DI_JOB_ID = DI_Job_ID,",
						"          DI_LOAD_DT",
						"     )) ~> SinkSnfStgTbl"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SEA_PET_LIC_LOCATION_DIM_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "loading location dim in Snf",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_GeoData_ds",
								"type": "DatasetReference"
							},
							"name": "GeoDataCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Snowflake_LocationDim_table",
								"type": "DatasetReference"
							},
							"name": "SinkSnfLocDim"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_id as string (\"SP_001\")",
						"}",
						"source(output(",
						"          state_fips as string,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> GeoDataCSV",
						"GeoDataCSV keyGenerate(output(Geo_SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_JOB_ID = $Job_id,",
						"          DI_LOAD_DATE = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK = Geo_SK_ID,",
						"          CITY = city,",
						"          STATE = state,",
						"          STATE_ABBR = state_abbr,",
						"          ZIP_CODE = zipcode,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT = DI_LOAD_DATE",
						"     )) ~> SinkSnfLocDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SEA_PET_LIC_FCT_LOAD')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Snowflake_SEA_PET_LIC_v2_STG",
								"type": "DatasetReference"
							},
							"name": "SourceStgTable"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_LocationDim_table",
								"type": "DatasetReference"
							},
							"name": "SourceLocationDim"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_BreedDim_table",
								"type": "DatasetReference"
							},
							"name": "SourceBreedDim"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_Date_Dim",
								"type": "DatasetReference"
							},
							"name": "SourceDateDim"
						},
						{
							"dataset": {
								"referenceName": "Snowflake_SEA_PET_LIC_v2_STG",
								"type": "DatasetReference"
							},
							"name": "FctMaxID"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Snowflake_PetLic_FCT_tbl",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinLocationDim"
						},
						{
							"name": "joinBreedDim"
						},
						{
							"name": "joinDateDim"
						},
						{
							"name": "surrogateKeyPetLicSK"
						},
						{
							"name": "selectReqCols"
						},
						{
							"name": "joinFactMaxID"
						},
						{
							"name": "derivedColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     job_id as string (\"SP_001\")",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as decimal(38,0),",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SourceStgTable",
						"source(output(",
						"          LOCATION_SK as decimal(10,0),",
						"          CITY as string,",
						"          STATE as string,",
						"          STATE_ABBR as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SourceLocationDim",
						"source(output(",
						"          BREED_SK as decimal(10,0),",
						"          START_DT as date,",
						"          END_DT as date,",
						"          IS_ACTIVE as decimal(10,0),",
						"          BREED_DK as decimal(10,0),",
						"          SPECIES_NAME as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SourceBreedDim",
						"source(output(",
						"          DT as date,",
						"          AABR_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as date,",
						"          END_DAY_OF_MONTH as date,",
						"          QUARTER_NUM as decimal(2,0),",
						"          DAY_OF_WEEK as decimal(2,0),",
						"          IS_WEEKEND as decimal(1,0),",
						"          YEAR_NUM as decimal(4,0),",
						"          MONTH_NUM as decimal(2,0),",
						"          DAY_NUM as decimal(2,0),",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> SourceDateDim",
						"source(output(",
						"          PET_LIC_SK_MAX as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'select nvl(max(PET_LIC_SK), 0) as PET_LIC_SK_max from SEATTLE_PET_LIC.PET_LIC_FCT',",
						"     format: 'query') ~> FctMaxID",
						"SourceStgTable, SourceLocationDim join(SourceStgTable@ZIP_CODE == SourceLocationDim@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocationDim",
						"joinLocationDim, SourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreedDim",
						"joinBreedDim, SourceDateDim join(LICENSE_ISSUE_DATE == DT,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDateDim",
						"selectReqCols keyGenerate(output(PetLic_SK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeyPetLicSK",
						"joinFactMaxID select(mapColumn(",
						"          LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_DIM_SK,",
						"          PET_LIC_SK_MAX",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> selectReqCols",
						"joinDateDim, FctMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFactMaxID",
						"surrogateKeyPetLicSK derive(PetLic_SK = PetLic_SK + PET_LIC_SK_MAX,",
						"          DI_JOB_ID = $job_id,",
						"          DI_LOAD_DT = currentDate()) ~> derivedColumns",
						"derivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LIC_NUM = LICENSE_NUMBER,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DATE_SK = DATE_DIM_SK,",
						"          PET_LIC_SK = PetLic_SK,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_NYPD_Arrests')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanUp",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_NYPD_Arrests_CleanUp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"readCSVfile": {
										"Directory": "NYPD_Arrests",
										"FileName": "Alteryx_Profiled_DS.csv",
										"FileDelimiter": ","
									},
									"SinkADLS": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "csv_2_SNF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CleanUp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:30:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "ID_JOB_ID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "ID_LOAD_DATE",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SnowflakeV2Sink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE STG.ARRESTS",
									"type": "Expression"
								},
								"importSettings": {
									"type": "SnowflakeImportCopyCommand"
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "AzureBlobStorage002_LS",
									"type": "LinkedServiceReference"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText_NYPDcsv_sink",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SnowflakeTable_NYPD_arrests",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "STG",
									"Table": "Arrests"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-14T02:39:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_NYPD_Arrests_CleanUp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SEAT_PET_LIC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RAW_DS_CleanUp_and_STG",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SEA_PET_LIC_CleanUp_and_STG",
								"type": "DataFlowReference",
								"parameters": {
									"Job_ID": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"readTSVfile": {},
									"sinkAdlsSilver": {},
									"SinkSnfStgTbl": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Breed_Dim_Load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "RAW_DS_CleanUp_and_STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SEA_PET_LIC_BREED_DIM_LOAD",
								"type": "DataFlowReference",
								"parameters": {
									"job_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SeaPetLicV2StgTbl": {},
									"BreedDimMaxID": {},
									"BreedDimTbl": {},
									"SinkSnfBreedDimTbl": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Location_Dim_Load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Breed_Dim_Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SEA_PET_LIC_LOCATION_DIM_LOAD",
								"type": "DataFlowReference",
								"parameters": {
									"Job_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"GeoDataCSV": {},
									"SinkSnfLocDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Fct_load",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Location_Dim_Load",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SEA_PET_LIC_FCT_LOAD",
								"type": "DataFlowReference",
								"parameters": {
									"job_id": {
										"value": "'@{pipeline().RunId}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceStgTable": {},
									"SourceLocationDim": {},
									"SourceBreedDim": {},
									"SourceDateDim": {},
									"FctMaxID": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SEA_PET_LIC_CleanUp_and_STG')]",
				"[concat(variables('factoryId'), '/dataflows/DF_SEA_PET_LIC_BREED_DIM_LOAD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_SEA_PET_LIC_LOCATION_DIM_LOAD')]",
				"[concat(variables('factoryId'), '/dataflows/DF_SEA_PET_LIC_FCT_LOAD')]"
			]
		}
	]
}